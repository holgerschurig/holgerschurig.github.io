<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>En on Holger Schurig's Computer Calisthenics &amp; Orthodontia</title><link>https://holgerschurig.github.io/en/</link><description>Recent content in En on Holger Schurig's Computer Calisthenics &amp; Orthodontia</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 14 Dec 2022 09:18:00 +0100</lastBuildDate><atom:link href="https://holgerschurig.github.io/en/index.xml" rel="self" type="application/rss+xml"/><item><title>Comment static hugo blog entry with Mastodon</title><link>https://holgerschurig.github.io/en/hugo-and-mastodon-comments/</link><pubDate>Wed, 14 Dec 2022 09:18:00 +0100</pubDate><guid>https://holgerschurig.github.io/en/hugo-and-mastodon-comments/</guid><description>&lt;p>This post describes a simply method to link back from your static block page to Mastodon, so that
people can eventually reply.&lt;/p></description></item><item><title>Sway: tweaks and (un)usual keybindings</title><link>https://holgerschurig.github.io/en/sway-tweaks-and-keybindings/</link><pubDate>Tue, 13 Dec 2022 18:28:00 +0100</pubDate><guid>https://holgerschurig.github.io/en/sway-tweaks-and-keybindings/</guid><description>&lt;p>When I started to configure Sway, I found a lot of configurations online, but
mostly were exactly the same. I too based my configuration on the &lt;a href="https://github.com/swaywm/sway/blob/master/config.in">given
example&lt;/a>, but disgressed
quite a bit.&lt;/p></description></item><item><title>Sway: Application startup via run-or-raise</title><link>https://holgerschurig.github.io/en/sway-run-or-raise/</link><pubDate>Tue, 13 Dec 2022 16:08:00 +0100</pubDate><guid>https://holgerschurig.github.io/en/sway-run-or-raise/</guid><description>In my Sway configuration I have two lines that start an application in a specific way:
bindsym Mod4+e exec ~/.config/sway/run-or-raise Emacs emacs bindsym Mod4+w exec ~/.config/sway/run-or-raise Firefox firefox What does this do?
First, the &amp;ldquo;exec&amp;rdquo; clause calls a python script, run-or-raise.
This python scripts wants two arguments. The first one is a container name. It uses swaymsg -t get_tree to get all outputs, work spaces and containers. And then it looks for any container (that is: application, Wayland client) that matches the name.</description></item><item><title>Sway: default initial layout</title><link>https://holgerschurig.github.io/en/sway-default-layout/</link><pubDate>Tue, 13 Dec 2022 15:30:00 +0100</pubDate><guid>https://holgerschurig.github.io/en/sway-default-layout/</guid><description>When I start Sway, I&amp;rsquo;d like to have Emacs on the left side of workspace 1, and a terminal (here Alacritty) on the right side, Unfortunately, this ~/.config/sway/config except won&amp;rsquo;t work:
exec emacs exac alacritty Because alacritty starts much faster than Emacs. So I&amp;rsquo;d get the terminal on the right side of the screen. And Emacs on the left. Not good.
Instead, I do this:
exec emacs for_window [class=&amp;#34;^Emacs$&amp;#34;] exec sh -c &amp;#39;pgrep -x alacritty &amp;gt;/dev/null || alacritty&amp;#39; for_window [app_id=&amp;#34;^emacs$&amp;#34;] exec sh -c &amp;#39;pgrep -x alacritty &amp;gt;/dev/null || alacritty&amp;#39; That is, I start Emacs.</description></item><item><title>mastodon.el: a Hydra to memorize/access it's many commands</title><link>https://holgerschurig.github.io/en/emacs-mastodon-hydra/</link><pubDate>Tue, 13 Dec 2022 11:57:00 +0100</pubDate><guid>https://holgerschurig.github.io/en/emacs-mastodon-hydra/</guid><description>&lt;p>Mastodon has a lot of commands. You can access most of them directly via keybindings, just use
&lt;code>M-x describe-mode&lt;/code> or the &lt;code>h&lt;/code> or &lt;code>?&lt;/code> keys. Can you remember them all?&lt;/p>
&lt;p>But, if you don&amp;rsquo;t use Mastodon that regularly, maybe a Hydra can help you?&lt;/p></description></item><item><title>AwesomeWM: about title bars and toggling them</title><link>https://holgerschurig.github.io/en/awesome-4.0-titlebars/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/awesome-4.0-titlebars/</guid><description>&lt;p>The default &lt;code>rc.lua&lt;/code> from Awesome 4.0 turns title bars on. Here I show
how you can turn them off, and also how I enable them only for
floating clients.&lt;/p></description></item><item><title>AwesomeWM: Alternative bindings setup</title><link>https://holgerschurig.github.io/en/awesome-4.0-bindings/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/awesome-4.0-bindings/</guid><description>&lt;p>The default &lt;code>rc.lua&lt;/code> from the Awesome window manager uses a lot of
&lt;code>globalkeys = awful.util.table.join(...)&lt;/code> code.&lt;/p>
&lt;p>I disliked this because &amp;hellip;&lt;/p>
&lt;ul>
&lt;li>in Lua, the last field of a table cannot have a comma. So often when
I moved an entry around, I ended up with a pointless syntax error
because of a missing or trailing comma&lt;/li>
&lt;li>adding elements by joining seems somewhat complex&lt;/li>
&lt;li>adding logic, e.g. only adding a keybinding under specific
circumstances is suddenly more difficult&lt;/li>
&lt;/ul>
&lt;p>So let&amp;rsquo;s change this &amp;hellip;&lt;/p></description></item><item><title>AwesomeWM: Tags and Layout setup</title><link>https://holgerschurig.github.io/en/awesome-4.0-tags-and-layouts/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/awesome-4.0-tags-and-layouts/</guid><description>&lt;p>In this post I show a nice method to define tags and associated
layouts, where the tag names change dynamically when the layout
changes.&lt;/p></description></item><item><title>AwesomeWM: using a global title bar</title><link>https://holgerschurig.github.io/en/awesome-4.0-global-titlebar/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/awesome-4.0-global-titlebar/</guid><description>&lt;p>This post shows how you can create a global titlebar. I personally removed the
tasklist and replaced this with the titlebar. The tasklist wasn&amp;rsquo;t good looking anyway
and so far I don&amp;rsquo;t miss the tasklist.&lt;/p></description></item><item><title>Export patches from Emacs' Notmuch</title><link>https://holgerschurig.github.io/en/emacs-notmuch-export-patch/</link><pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/emacs-notmuch-export-patch/</guid><description>I’m reading several linux-kernel related mailing lists. They are full of proposed patches. And from time to time a few of them look interesting. So I wanted to have an easy (and fast) solution of exporting those patches: with a keystroke, and without the need of specifying patch names.
Format of a patch email If you ever contributed a patch to Linux, you’d know that your patch must follow some formatting rules, or it might be ignored.</description></item><item><title>Efficiently untangling Elisp from .org files</title><link>https://holgerschurig.github.io/en/emacs-efficiently-untangling-elisp/</link><pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/emacs-efficiently-untangling-elisp/</guid><description>&lt;p>Many people keep their Emacs config in and org-mode file because it’s
easier to manage.&lt;/p>
&lt;p>However, we need to extract the Elisp parts out of the org file and
evaluate them somehow. org-mode has a built-in command for this:
&lt;code>(org-babel-load-file &amp;quot;config.org&amp;quot;)&lt;/code>. However, this is an org-mode
command, and org-mode is huge. So your init.el needs to load a good
amount of org-mode just to get the elisp out of it.
But to be able to do this you’d
need to load a good amount of the org-mode file.&lt;/p>
&lt;p>I wanted to have something better. Something that is flexible and
gives me a quicker startup time.&lt;/p></description></item><item><title>A nicer notmuch-hello screen for Emacs</title><link>https://holgerschurig.github.io/en/emacs-notmuch-hello/</link><pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/emacs-notmuch-hello/</guid><description>&lt;p>Here I define my own hello screen for &lt;a href="http://notmuchmail.org/">notmuch&lt;/a>. However, I didn’t like it’s original
“hello” screen not that much. So I wrote something to replace it.&lt;/p></description></item><item><title>notmuch: automatically mark uninteresting mails as read</title><link>https://holgerschurig.github.io/en/notmuch-mark-uninteresting/</link><pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/notmuch-mark-uninteresting/</guid><description>&lt;p>Now that I switched from Emacs&amp;rsquo; &lt;code>GNUS&lt;/code> to Emacs&amp;rsquo; &lt;code>notmuch&lt;/code>, I needed a
method to automatically &amp;ldquo;discard&amp;rdquo; uninteresting mails. In some Linux
mailing lists a huge amount of mails are about topics that I don&amp;rsquo;t
care. So I a little shell script &lt;code>bin/pollmail.sh&lt;/code> that polls
the mails and efficiently marks uninteresting stuff as read.&lt;/p></description></item><item><title>notmuch: polling mail with mbsync</title><link>https://holgerschurig.github.io/en/notmuch-polling-with-mbsync/</link><pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/notmuch-polling-with-mbsync/</guid><description>&lt;p>In this blog post I describe how I configured &lt;code>mbsync&lt;/code> 1.3.0 and
&lt;code>notmuch&lt;/code> 0.22 so that they get my mail out of GMail&amp;rsquo;s IMAP service.&lt;/p></description></item><item><title>Blogging with Hugo</title><link>https://holgerschurig.github.io/en/blogging-with-hugo/</link><pubDate>Fri, 01 Apr 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/blogging-with-hugo/</guid><description>I wrote my home page with various tools &amp;hellip;
Pure HTML At the beginning, I used HTML and .shtml include files
Apache was told to process html include files, and I had the boilerplate and bottom in such files and included them from the per-page HTML files.
Webber Later I switched to Webber. That was a python written open-source software that I published on gitorious.org. The original gitorious is now down, but you find the git tree still at https://gitorious.</description></item><item><title>Let Hugo ignore Emacs lockfiles</title><link>https://holgerschurig.github.io/en/let-hugo-ignore-emacs-lockfiles/</link><pubDate>Fri, 01 Apr 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/let-hugo-ignore-emacs-lockfiles/</guid><description>&lt;p>When you run&lt;/p>
&lt;pre>&lt;code>hugo server
&lt;/code>&lt;/pre>
&lt;p>the static web-site generator &lt;a href="http://gohugo.io">Hugo&lt;/a> creates a local
server that you can use to fine-tune your pages. Hugo sits and watches
your content and layout directory for any changes. Whenever a file changes,
it re-renders the pages and even tells your browser to live-relead the pages.&lt;/p>
&lt;p>Very nice.&lt;/p>
&lt;p>Except that it doesn&amp;rsquo;t work with Emacs. But there&amp;rsquo;s a cure.&lt;/p></description></item><item><title>Serial setup with C-Kermit</title><link>https://holgerschurig.github.io/en/serial-setup-with-ckermit/</link><pubDate>Fri, 01 Apr 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/serial-setup-with-ckermit/</guid><description>&lt;p>When you work with embedded devices (e.g. SabreLite, &lt;a href="../tags/arduino/">Arduino&lt;/a>,
&lt;a href="../tags/raspi/">Raspberry Pi&lt;/a>) you often need to work over a serial port, e.g. to
customize the Barebox or U-Boot boot loader.&lt;/p>
&lt;p>On Linux, people often use &amp;ldquo;&lt;em>minicom&lt;/em>&amp;rdquo; for this. Other options are
&amp;ldquo;&lt;em>Putty&lt;/em>&amp;rdquo; (yes, it&amp;rsquo;s not a Windows-only program, try &amp;ldquo;&lt;code>apt-get install putty&lt;/code>&amp;rdquo;) or even the ancient &lt;a href="http://www.kermitproject.org">C-Kermit&lt;/a>.
Surprisingly I found that Kermit suits my work-flow the best, when
properly configured.&lt;/p></description></item><item><title>Blog from Org-Mode to Hugo</title><link>https://holgerschurig.github.io/en/emacs-blog-from-org-to-hugo/</link><pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/emacs-blog-from-org-to-hugo/</guid><description>&lt;p>I use the static web-site generator &lt;a href="https://gohugo.io/">Hugo&lt;/a> to create my home page. I
also use &lt;a href="https://www.gnu.org/software/emacs/">Emacs&lt;/a> as my main editor. Hugo is good with &lt;a href="https://help.github.com/categories/writing-on-github/">Markdown&lt;/a>. Emacs is
good at Markdown, too. But much better with &lt;a href="http://orgmode.org/">Org-Mode&lt;/a>.&lt;/p>
&lt;p>If you want …&lt;/p>
&lt;ul>
&lt;li>export one &lt;code>.org&lt;/code> file as one web page, look at Giles Paterson
&lt;a href="https://vurt.co.uk/post/blogging-with-emacs-and-hugo/">solution&lt;/a>&lt;/li>
&lt;li>export just a subtree of an org-file (e.g. from your org-based Emacs
configuration), then look here.&lt;/li>
&lt;/ul></description></item><item><title>Update your Blog with Sitecopy</title><link>https://holgerschurig.github.io/en/blogging-with-sitecopy/</link><pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/blogging-with-sitecopy/</guid><description>&lt;p>Almost any site describing how to use the static web site generator
&lt;a href="http://gohugo.io">Hugo&lt;/a> uses some complicated method to get the contents
publish.&lt;/p></description></item><item><title>bash aliases</title><link>https://holgerschurig.github.io/en/bash-aliases/</link><pubDate>Fri, 25 Mar 2016 17:39:29 +0100</pubDate><guid>https://holgerschurig.github.io/en/bash-aliases/</guid><description>&lt;p>Here are the bash aliases that I like and install almost everywhere.&lt;/p></description></item></channel></rss>