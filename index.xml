<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Holger Schurig's Computer Calisthenics &amp; Orthodontia</title><link>https://holgerschurig.github.io/</link><description>Recent content on Holger Schurig's Computer Calisthenics &amp; Orthodontia</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 20 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://holgerschurig.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>MNCI: Handterminal mit ARM (Intel PXA320)</title><link>https://holgerschurig.github.io/de/mnci/</link><pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/mnci/</guid><description>&lt;p>Hier stelle ich ein komplexes Projekt vor, bei dem ich federführend die gesamte &lt;br/>
Software erstellt habe. &lt;br/>&lt;/p></description></item><item><title>OpenEmbedded</title><link>https://holgerschurig.github.io/de/openembedded/</link><pubDate>Fri, 19 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/openembedded/</guid><description>&lt;p>Ein kleiner Abriss, wie OpenEmbedded entstand, was mein Beitrag war und wieso &lt;br/>
ich später eine bessere Lösung im Embedded-Linux-Bereich eingesetzt habe. &lt;br/>&lt;/p></description></item><item><title>flexibler Hardware-Tester für x86-Systeme: hwtester</title><link>https://holgerschurig.github.io/de/hwtester/</link><pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/hwtester/</guid><description>&lt;p>Hier geht es darum, frisch produzierte Geräte der Klassen DLT-V83 und DLT-V72 &lt;br/>
auf Herz und Nieren zu prüfen. &lt;br/>&lt;/p></description></item><item><title>Automatische Image-Erstellung</title><link>https://holgerschurig.github.io/de/mkimage/</link><pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/mkimage/</guid><description>&lt;p>System um Linux-Images automatisch zu erstellen (einfacher und schneller als &lt;br/>
OpenEmbedded, Puppet, Ansible etc). &lt;br/>&lt;/p></description></item><item><title>Combined-Linux: ein Image für viele Geräte</title><link>https://holgerschurig.github.io/de/combined-linux/</link><pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/combined-linux/</guid><description>&lt;p>Hier ging es darum, ein und dasselbe Linux-Image auf eine Vielzahl von Geräte zu portieren. &lt;br/>&lt;/p>
&lt;p>Dies stand im Gegensatz zu den Windows- und Windows-Embedded-Images. Hier wurde &lt;br/>
für jedes Gerät ein eigenes Image erstellt. Gab es eine Innovation, mussten alle &lt;br/>
diese Image jeweils neu erstellt werden &amp;mdash; ein zeitraubender Prozess. &lt;br/>&lt;/p>
&lt;p>Ich wollte ein &amp;ldquo;Combined Linux&amp;rdquo; machen: eine Image, das alle Features in sich &lt;br/>
enthält. Das man überall installieren kann. Das die Hardware erkennt und die &lt;br/>
jeweils eingebaute Hardware passend anspricht und zur Verfügung stellt. &lt;br/>&lt;/p></description></item><item><title>Zephyr: fixing LSP issues</title><link>https://holgerschurig.github.io/en/zephyr-fixing-lsp-issues/</link><pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/zephyr-fixing-lsp-issues/</guid><description>&lt;p>Zephyr uses command-line arguments for GCC that the clangd LSP server doesn&amp;rsquo;t &lt;br/>
understand. Here I present one approach how to fix this. &lt;br/>&lt;/p></description></item><item><title>Zepyhr: multi-board setup</title><link>https://holgerschurig.github.io/en/zephyr-multi-board/</link><pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/zephyr-multi-board/</guid><description>&lt;p>This blog post shows how to setup a Zephyr project that you can use for several boards. &lt;br/>&lt;/p></description></item><item><title>Zepyhr: reproducible project setup</title><link>https://holgerschurig.github.io/en/zephyr-reproducible-project-setup/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/zephyr-reproducible-project-setup/</guid><description>&lt;p>This blog post demonstrates how to set up a Zephyr project in a &lt;strong>reproducible&lt;/strong> &lt;br/>
manner. Additionally, it provides some Makefile tricks and best practices for &lt;br/>
using this powerful tool effectively. &lt;br/>&lt;/p>
&lt;p>While you can set up a Zephyr project manually, following the &lt;a href="https://docs.zephyrproject.org/latest/develop/getting/started/index.html">Getting Started &lt;br/>
Guide&lt;/a>, a reproducible and automatic approach has several advantages. Firstly, &lt;br/>
any changes made to the project will be automatically documented in GIT. &lt;br/>
Furthermore, it is easier to move the project onto CI/CD servers or into Docker &lt;br/>
containers. &lt;br/>&lt;/p></description></item><item><title>Comment static hugo blog entry with Mastodon</title><link>https://holgerschurig.github.io/en/hugo-and-mastodon-comments/</link><pubDate>Wed, 14 Dec 2022 09:18:00 +0100</pubDate><guid>https://holgerschurig.github.io/en/hugo-and-mastodon-comments/</guid><description>&lt;p>This post describes a simply method to link back from your static block page to Mastodon, so that
people can eventually reply.&lt;/p></description></item><item><title>Sway: tweaks and (un)usual keybindings</title><link>https://holgerschurig.github.io/en/sway-tweaks-and-keybindings/</link><pubDate>Tue, 13 Dec 2022 18:28:00 +0100</pubDate><guid>https://holgerschurig.github.io/en/sway-tweaks-and-keybindings/</guid><description>&lt;p>When I started to configure Sway, I found a lot of configurations online, but
mostly were exactly the same. I too based my configuration on the &lt;a href="https://github.com/swaywm/sway/blob/master/config.in">given
example&lt;/a>, but disgressed
quite a bit.&lt;/p></description></item><item><title>Sway: Application startup via run-or-raise</title><link>https://holgerschurig.github.io/en/sway-run-or-raise/</link><pubDate>Tue, 13 Dec 2022 16:08:00 +0100</pubDate><guid>https://holgerschurig.github.io/en/sway-run-or-raise/</guid><description>In my Sway configuration I have two lines that start an application in a specific way:
bindsym Mod4+e exec ~/.config/sway/run-or-raise Emacs emacs bindsym Mod4+w exec ~/.config/sway/run-or-raise Firefox firefox What does this do?
First, the &amp;ldquo;exec&amp;rdquo; clause calls a python script, run-or-raise.
This python scripts wants two arguments. The first one is a container name. It uses swaymsg -t get_tree to get all outputs, work spaces and containers. And then it looks for any container (that is: application, Wayland client) that matches the name.</description></item><item><title>Sway: default initial layout</title><link>https://holgerschurig.github.io/en/sway-default-layout/</link><pubDate>Tue, 13 Dec 2022 15:30:00 +0100</pubDate><guid>https://holgerschurig.github.io/en/sway-default-layout/</guid><description>When I start Sway, I&amp;rsquo;d like to have Emacs on the left side of workspace 1, and a terminal (here Alacritty) on the right side, Unfortunately, this ~/.config/sway/config except won&amp;rsquo;t work:
exec emacs exac alacritty Because alacritty starts much faster than Emacs. So I&amp;rsquo;d get the terminal on the right side of the screen. And Emacs on the left. Not good.
Instead, I do this:
exec emacs for_window [class=&amp;#34;^Emacs$&amp;#34;] exec sh -c &amp;#39;pgrep -x alacritty &amp;gt;/dev/null || alacritty&amp;#39; for_window [app_id=&amp;#34;^emacs$&amp;#34;] exec sh -c &amp;#39;pgrep -x alacritty &amp;gt;/dev/null || alacritty&amp;#39; That is, I start Emacs.</description></item><item><title>mastodon.el: a Hydra to memorize/access it's many commands</title><link>https://holgerschurig.github.io/en/emacs-mastodon-hydra/</link><pubDate>Tue, 13 Dec 2022 11:57:00 +0100</pubDate><guid>https://holgerschurig.github.io/en/emacs-mastodon-hydra/</guid><description>&lt;p>Mastodon has a lot of commands. You can access most of them directly via keybindings, just use
&lt;code>M-x describe-mode&lt;/code> or the &lt;code>h&lt;/code> or &lt;code>?&lt;/code> keys. Can you remember them all?&lt;/p>
&lt;p>But, if you don&amp;rsquo;t use Mastodon that regularly, maybe a Hydra can help you?&lt;/p></description></item><item><title>AwesomeWM: about title bars and toggling them</title><link>https://holgerschurig.github.io/en/awesome-4.0-titlebars/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/awesome-4.0-titlebars/</guid><description>&lt;p>The default &lt;code>rc.lua&lt;/code> from Awesome 4.0 turns title bars on. Here I show
how you can turn them off, and also how I enable them only for
floating clients.&lt;/p></description></item><item><title>AwesomeWM: Alternative bindings setup</title><link>https://holgerschurig.github.io/en/awesome-4.0-bindings/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/awesome-4.0-bindings/</guid><description>&lt;p>The default &lt;code>rc.lua&lt;/code> from the Awesome window manager uses a lot of
&lt;code>globalkeys = awful.util.table.join(...)&lt;/code> code.&lt;/p>
&lt;p>I disliked this because &amp;hellip;&lt;/p>
&lt;ul>
&lt;li>in Lua, the last field of a table cannot have a comma. So often when
I moved an entry around, I ended up with a pointless syntax error
because of a missing or trailing comma&lt;/li>
&lt;li>adding elements by joining seems somewhat complex&lt;/li>
&lt;li>adding logic, e.g. only adding a keybinding under specific
circumstances is suddenly more difficult&lt;/li>
&lt;/ul>
&lt;p>So let&amp;rsquo;s change this &amp;hellip;&lt;/p></description></item><item><title>AwesomeWM: Tags and Layout setup</title><link>https://holgerschurig.github.io/en/awesome-4.0-tags-and-layouts/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/awesome-4.0-tags-and-layouts/</guid><description>&lt;p>In this post I show a nice method to define tags and associated
layouts, where the tag names change dynamically when the layout
changes.&lt;/p></description></item><item><title>AwesomeWM: using a global title bar</title><link>https://holgerschurig.github.io/en/awesome-4.0-global-titlebar/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/awesome-4.0-global-titlebar/</guid><description>&lt;p>This post shows how you can create a global titlebar. I personally removed the
tasklist and replaced this with the titlebar. The tasklist wasn&amp;rsquo;t good looking anyway
and so far I don&amp;rsquo;t miss the tasklist.&lt;/p></description></item><item><title>Export patches from Emacs' Notmuch</title><link>https://holgerschurig.github.io/en/emacs-notmuch-export-patch/</link><pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/emacs-notmuch-export-patch/</guid><description>&lt;p>I’m reading several linux-kernel related mailing lists. They are full
of proposed patches. And from time to time a few of them look
interesting. So I wanted to have an easy (and fast) solution of
exporting those patches: with a keystroke, and without the need
of specifying patch names.&lt;/p></description></item><item><title>Efficiently untangling Elisp from .org files</title><link>https://holgerschurig.github.io/en/emacs-efficiently-untangling-elisp/</link><pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/emacs-efficiently-untangling-elisp/</guid><description>&lt;p>Many people keep their Emacs config in and org-mode file because it’s
easier to manage.&lt;/p>
&lt;p>However, we need to extract the Elisp parts out of the org file and
evaluate them somehow. org-mode has a built-in command for this:
&lt;code>(org-babel-load-file &amp;quot;config.org&amp;quot;)&lt;/code>. However, this is an org-mode
command, and org-mode is huge. So your init.el needs to load a good
amount of org-mode just to get the elisp out of it.
But to be able to do this you’d
need to load a good amount of the org-mode file.&lt;/p>
&lt;p>I wanted to have something better. Something that is flexible and
gives me a quicker startup time.&lt;/p></description></item><item><title>A nicer notmuch-hello screen for Emacs</title><link>https://holgerschurig.github.io/en/emacs-notmuch-hello/</link><pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/emacs-notmuch-hello/</guid><description>&lt;p>Here I define my own hello screen for &lt;a href="http://notmuchmail.org/">notmuch&lt;/a>. However, I didn’t like it’s original
“hello” screen not that much. So I wrote something to replace it.&lt;/p></description></item><item><title>notmuch: automatically mark uninteresting mails as read</title><link>https://holgerschurig.github.io/en/notmuch-mark-uninteresting/</link><pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/notmuch-mark-uninteresting/</guid><description>&lt;p>Now that I switched from Emacs&amp;rsquo; &lt;code>GNUS&lt;/code> to Emacs&amp;rsquo; &lt;code>notmuch&lt;/code>, I needed a
method to automatically &amp;ldquo;discard&amp;rdquo; uninteresting mails. In some Linux
mailing lists a huge amount of mails are about topics that I don&amp;rsquo;t
care. So I a little shell script &lt;code>bin/pollmail.sh&lt;/code> that polls
the mails and efficiently marks uninteresting stuff as read.&lt;/p></description></item><item><title>notmuch: polling mail with mbsync</title><link>https://holgerschurig.github.io/en/notmuch-polling-with-mbsync/</link><pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/notmuch-polling-with-mbsync/</guid><description>&lt;p>In this blog post I describe how I configured &lt;code>mbsync&lt;/code> 1.3.0 and
&lt;code>notmuch&lt;/code> 0.22 so that they get my mail out of GMail&amp;rsquo;s IMAP service.&lt;/p></description></item><item><title>Blogging with Hugo</title><link>https://holgerschurig.github.io/en/blogging-with-hugo/</link><pubDate>Fri, 01 Apr 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/blogging-with-hugo/</guid><description>I wrote my home page with various tools &amp;hellip;
Pure HTML At the beginning, I used HTML and .shtml include files
Apache was told to process html include files, and I had the boilerplate and bottom in such files and included them from the per-page HTML files.
Webber Later I switched to Webber. That was a python written open-source software that I published on gitorious.org. The original gitorious is now down, but you find the git tree still at https://gitorious.</description></item><item><title>Let Hugo ignore Emacs lockfiles</title><link>https://holgerschurig.github.io/en/let-hugo-ignore-emacs-lockfiles/</link><pubDate>Fri, 01 Apr 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/let-hugo-ignore-emacs-lockfiles/</guid><description>&lt;p>When you run&lt;/p>
&lt;pre>&lt;code>hugo server
&lt;/code>&lt;/pre>
&lt;p>the static web-site generator &lt;a href="http://gohugo.io">Hugo&lt;/a> creates a local
server that you can use to fine-tune your pages. Hugo sits and watches
your content and layout directory for any changes. Whenever a file changes,
it re-renders the pages and even tells your browser to live-relead the pages.&lt;/p>
&lt;p>Very nice.&lt;/p>
&lt;p>Except that it doesn&amp;rsquo;t work with Emacs. But there&amp;rsquo;s a cure.&lt;/p></description></item><item><title>Serial setup with C-Kermit</title><link>https://holgerschurig.github.io/en/serial-setup-with-ckermit/</link><pubDate>Fri, 01 Apr 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/serial-setup-with-ckermit/</guid><description>&lt;p>When you work with embedded devices (e.g. SabreLite, &lt;a href="./tags/arduino/">Arduino&lt;/a>,
&lt;a href="./tags/raspi/">Raspberry Pi&lt;/a>) you often need to work over a serial port, e.g. to
customize the Barebox or U-Boot boot loader.&lt;/p>
&lt;p>On Linux, people often use &amp;ldquo;&lt;em>minicom&lt;/em>&amp;rdquo; for this. Other options are
&amp;ldquo;&lt;em>Putty&lt;/em>&amp;rdquo; (yes, it&amp;rsquo;s not a Windows-only program, try &amp;ldquo;&lt;code>apt-get install putty&lt;/code>&amp;rdquo;) or even the ancient &lt;a href="http://www.kermitproject.org">C-Kermit&lt;/a>.
Surprisingly I found that Kermit suits my work-flow the best, when
properly configured.&lt;/p></description></item><item><title>Blog from Org-Mode to Hugo</title><link>https://holgerschurig.github.io/en/emacs-blog-from-org-to-hugo/</link><pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/emacs-blog-from-org-to-hugo/</guid><description>&lt;p>I use the static web-site generator &lt;a href="https://gohugo.io/">Hugo&lt;/a> to create my home page. I
also use &lt;a href="https://www.gnu.org/software/emacs/">Emacs&lt;/a> as my main editor. Hugo is good with &lt;a href="https://help.github.com/categories/writing-on-github/">Markdown&lt;/a>. Emacs is
good at Markdown, too. But much better with &lt;a href="http://orgmode.org/">Org-Mode&lt;/a>.&lt;/p>
&lt;p>If you want …&lt;/p>
&lt;ul>
&lt;li>export one &lt;code>.org&lt;/code> file as one web page, look at Giles Paterson
&lt;a href="https://vurt.co.uk/post/blogging-with-emacs-and-hugo/">solution&lt;/a>&lt;/li>
&lt;li>export just a subtree of an org-file (e.g. from your org-based Emacs
configuration), then look here.&lt;/li>
&lt;/ul></description></item><item><title>Update your Blog with Sitecopy</title><link>https://holgerschurig.github.io/en/blogging-with-sitecopy/</link><pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/en/blogging-with-sitecopy/</guid><description>&lt;p>Almost any site describing how to use the static web site generator
&lt;a href="http://gohugo.io">Hugo&lt;/a> uses some complicated method to get the contents
publish.&lt;/p></description></item><item><title>ATmega328 von Raspberry aus programmieren</title><link>https://holgerschurig.github.io/de/raspi-atmega/</link><pubDate>Mon, 28 Mar 2016 17:48:46 +0200</pubDate><guid>https://holgerschurig.github.io/de/raspi-atmega/</guid><description>&lt;p>Viele Leute kennen den ATmega von den Arduino-Projekten. Dort sind die
Prozessoren bereits mit einem sog. &amp;lsquo;Bootloader&amp;rsquo; versehen, man kann sie
also über deren serielle Schnittstelle programmieren.&lt;/p>
&lt;p>Was aber, wenn man einen &amp;ldquo;rohen&amp;rdquo; ATmega hat, frisch vom
Elektronikladen? Und außerdem kein AVR-Programmiergerät? Dann nimmt
man eben des Raspberry zum Programmieren!&lt;/p></description></item><item><title>Impressum</title><link>https://holgerschurig.github.io/impressum/</link><pubDate>Fri, 25 Mar 2016 21:47:31 +0100</pubDate><guid>https://holgerschurig.github.io/impressum/</guid><description>Adresse Holger Schurig, Friedhofsweg 4, D-61206 Wöllstadt
holgerschurig bei golf-mike-alpha-india-lima-dot-charly-oscar-mike (nach dem internationalem Buchstabieralphabet)
Mastodon: atsign holgerschurig bei emacs.ch
Amateurfunk-Rufzeichen: DH3HS
Haftungsausschluß ??? Jeder einzelne Link auf dieser Seite wurde von mir höchstselbst gesetzt.
Auf keiner der von mir verlinkten Seiten haben sich zum Zeitpunkt der Verlinkung nach meinem Wissensstand illegale oder dem deutschen Recht zuwiderlaufende Inhalte befunden.
Es besteht daher für mich keinerlei Notwendigkeit, mich zum gegenwärtigen Zeitpunkt davon in irgendeiner Weise zu distanzieren.</description></item><item><title>bash aliases</title><link>https://holgerschurig.github.io/en/bash-aliases/</link><pubDate>Fri, 25 Mar 2016 17:39:29 +0100</pubDate><guid>https://holgerschurig.github.io/en/bash-aliases/</guid><description>&lt;p>Here are the bash aliases that I like and install almost everywhere.&lt;/p></description></item><item><title>Lauflicht mit Raspberry und 74HC595</title><link>https://holgerschurig.github.io/de/raspi-lauflicht/</link><pubDate>Sun, 06 Mar 2016 12:32:10 +0100</pubDate><guid>https://holgerschurig.github.io/de/raspi-lauflicht/</guid><description>&lt;p>Bei dieser Schaltung geht es mir weniger darum, 8 LEDs zu betreiben.
Die kann man nämlich auch direkt am Raspberry Pi anschließen. Sondern
es geht darum, mit den Schieberegister 74HC595 zu experimentieren.&lt;/p>
&lt;p>Dieses steuere ich zunächst durch diverse GPIO Ports an.&lt;/p>
&lt;p>Und danach betreibe ich es am SPI-Port des RasPi. Das funktioniert
wunderbar, obwohl der Text &amp;ldquo;SPI&amp;rdquo; nirgendwo im 74HC595-Datenblatt
auftaucht :-)&lt;/p></description></item><item><title>Messmöglichkeiten des HP8920A</title><link>https://holgerschurig.github.io/de/hp8920a_funktionen/</link><pubDate>Fri, 02 Jul 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/hp8920a_funktionen/</guid><description>&lt;p>Es gibt ein &amp;ldquo;Application Handbook&amp;rdquo;, in dem steht, für welche Messungen
das Gerät geeignet ist. Für einige Messungen braucht man einen &amp;ldquo;Power
Splitter / Combiner&amp;rdquo;, welche ich noch nicht besitze. Oder eine &amp;ldquo;Return
Loss Bridge&amp;rdquo;, welche ich zwar habe, aber deren Qualität ich noch nicht
kenne.&lt;/p></description></item><item><title>L/C Messgerät von DJ8TH</title><link>https://holgerschurig.github.io/de/lcmeter/</link><pubDate>Sun, 13 Jun 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/lcmeter/</guid><description>Über eBay habe ich für 30,50 EUR (plus 7,50 EUR für Versand) ein L/C-Meter von DJ8TH ersteigert. Hier eine Ansicht:
Für den Preis bin ich mit dem Gerät bisher sehr zufrieden. Sogar eine 9V-Batterie war schon enthalten.
Allerdings scheint DJ8TH ein starker Raucher zu sein. Die Zeitungen im Karton roch sehr nach Rauch. Und auch jetzt, nach mehreren Tagen, riecht es im Gehäuse ebenfalls noch. Wenn&amp;rsquo;s keine weiteren Mängel gibt &amp;hellip;</description></item><item><title>Reflektionsmessung an Antenne Maldol EX-104</title><link>https://holgerschurig.github.io/de/antennenmessung/</link><pubDate>Sun, 13 Jun 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/antennenmessung/</guid><description>&lt;p>Laborbucheintrag: wie man mit einem Spektrum-Analyzer eine Antenne ausmisst.&lt;/p></description></item><item><title>Reflexionsmesskopf BX-066</title><link>https://holgerschurig.github.io/de/bx066/</link><pubDate>Sun, 13 Jun 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/bx066/</guid><description>&lt;p>Im Mai 2010 habe ich mir den Reflexionsmesskopf
&lt;a href="http://www.box73.de/catalog/product_info.php?products_id=1296">BX-066&lt;/a>
von Funkamateur / Box73 gekauft.&lt;/p></description></item><item><title>Terminatoren ausmessen</title><link>https://holgerschurig.github.io/de/terminatorenmessung/</link><pubDate>Sun, 13 Jun 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/terminatorenmessung/</guid><description>&lt;p>Eigentlich wollte ich mir mal den &lt;a href="./de/bx066/">BX-066&lt;/a>
&amp;ldquo;Messtechnisch&amp;rdquo; mit dem &lt;a href="./de/hp8920a/">HP8920A&lt;/a> ansehen, z.B. die
Einfügedämpfung und die Richtschärfe bestimmen.&lt;/p>
&lt;p>Dazu, dachte ich, betreibe ich den BX-066 erst mal offen, dann schließe
ich einen Terminator mit 50 Ohm an und schau ihn mir nochmals an. Dann
sehe ich ja, wieviel Leistung im BX-066 bleibt.&lt;/p></description></item><item><title>Funkmessplatz HP 8920A</title><link>https://holgerschurig.github.io/de/hp8920a/</link><pubDate>Thu, 03 Jun 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/hp8920a/</guid><description>&lt;p>Ich habe derzeit Zugriff auf ein interessantes, wenn auch altes
Messgerät. Eigentlich schon ein Funkmessplatz.&lt;/p>
&lt;p>Nun hat das Messgerät über 7 Jahre unbenutzt
in einer Lager-Ecke gelegen und ich darf es bis auf weiteres zuhause
benutzen. Fein!&lt;/p></description></item><item><title>Schurig Universalzähler CU 51 N</title><link>https://holgerschurig.github.io/de/cu51n/</link><pubDate>Thu, 03 Jun 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/cu51n/</guid><description>&lt;p>Wie ich zu einem Relikt gekommen bin :-)&lt;/p></description></item><item><title>Mein Weg zum Funkamateur</title><link>https://holgerschurig.github.io/de/funken-mein-weg/</link><pubDate>Sat, 13 Mar 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/funken-mein-weg/</guid><description>13. April 2010 Funkamateure dürfen ihre Geräte selbst bauen. Dazu bedürfen Sie aber einer Prüfung. Und just diese Prüfung habe ich heute bei der Bundesnetzagentur, Außenstelle Eschborn, bestanden.
Doch wie kam es dazu?
ca. 1984 Früher hatte ich mal einen Apple II Computer und war Mitglied in einem Computerverein namens AUGE. So um das Jahr 1983/1984 lernte ich über diesen Verein Funkamateure aus dem Raum Gießen kennen. Leider habe ich deren Namen vergessen :-(</description></item><item><title/><link>https://holgerschurig.github.io/de/combined-linux/combined-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/combined-linux/combined-linux/</guid><description>Combined-Linux: ein Image für viele Geräte Hier ging es darum, ein und dasselbe Linux-Image auf eine Vielzahl von Geräte zu portieren.
Dies stand im Gegensatz zu den Windows- und Windows-Embedded-Images. Hier wurde für jedes Gerät ein eigenes Image erstellt. Gab es eine Innovation, mussten alle diese Image jeweils neu erstellt werden — ein zeitraubender Prozess.
Ich wollte ein &amp;#34;Combined Linux&amp;#34; machen: eine Image, das alle Features in sich enthält. Das man überall installieren kann.</description></item><item><title/><link>https://holgerschurig.github.io/de/dynamischer-flashschutz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/dynamischer-flashschutz/</guid><description>Dynamischer Flash-Schutz Hier geht es darum, wie man den Flash-Speicher vor Wear-Out schützen kann, ohne die Usability allzu sehr einzuschränken.
Dynamischer Flash-Schutz Projekt-Info Warum muss Flash geschützt werden? Lösungsansätze Flash-Schutz am Beispiel Verwandte Projekte In Beiträgen der Kategorie Job trage ich Projekte zusammen, die ich im Rahmen meiner beruflichen Karriere federführend durchgeführt habe. Ich gehe dabei mit Absicht nicht allzusehr auf Details an: die Interessen meiner Arbeitgeber sollen ja nicht berührt werden.</description></item><item><title/><link>https://holgerschurig.github.io/de/hwtester/hwtester/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/hwtester/hwtester/</guid><description>flexibler Hardware-Tester für x86-Systeme: hwtester Hier geht es darum, frisch produzierte Geräte der Klassen DLT-V83 und DLT-V72 auf Herz und Nieren zu prüfen.
flexibler Hardware-Tester für x86-Systeme: hwtester Projekt-Info Anforderungen Image erstellen automatisiert USB-Stick erstellen Tests Testplätze Testarten Geräte Aufbau der Tests Kommunikation mit Test-Fixture Testreport abspeichern Verwandte Projekte In Beiträgen der Kategorie Job trage ich Projekte zusammen, die ich im Rahmen meiner beruflichen Karriere federführend durchgeführt habe. Ich gehe dabei mit Absicht nicht allzusehr auf Details an: die Interessen meiner Arbeitgeber sollen ja nicht berührt werden.</description></item><item><title/><link>https://holgerschurig.github.io/de/mkimage/mkimage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/mkimage/mkimage/</guid><description>Automatische Image-Erstellung System um Linux-Images automatisch zu erstellen (einfacher und schneller als OpenEmbedded, Puppet, Ansible etc).
Automatische Image-Erstellung Projekt-Info Anforderungen Vorgehensweise debootstrap Kernel-Erstellung systemd wpasupplicant Pakete, Konfigurationsdateien Verwandte Projekte In Beiträgen der Kategorie Job trage ich Projekte zusammen, die ich im Rahmen meiner beruflichen Karriere federführend durchgeführt habe. Ich gehe dabei mit Absicht nicht allzusehr auf Details an: die Interessen meiner Arbeitgeber sollen ja nicht berührt werden.
Projekt-Info Idee &amp;amp; Umsetzung: ich</description></item><item><title/><link>https://holgerschurig.github.io/de/mnci/mnci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/mnci/mnci/</guid><description>MNCI: Handterminal mit ARM (Intel PXA320) Hier stelle ich ein komplexes Projekt vor, bei dem ich federführend die gesamte Software erstellt habe.
MNCI: Handterminal mit ARM (Intel PXA320) Projekt-Info Vorgeschichte Zum Gerät&amp;lt;&amp;lt;geraet&amp;gt;&amp;gt; Bootloader Flashen via Boundary-Scan Linux-Kernel User-Space Projektende Verwandte Projekte In Beiträgen der Kategorie Job trage ich Projekte zusammen, die ich im Rahmen meiner beruflichen Karriere federführend durchgeführt habe. Ich gehe dabei mit Absicht nicht allzusehr auf Details an: die Interessen meiner Arbeitgeber sollen ja nicht berührt werden.</description></item><item><title/><link>https://holgerschurig.github.io/de/openembedded/openembedded/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/openembedded/openembedded/</guid><description>OpenEmbedded Ein kleiner Abriss, wie OpenEmbedded entstand, was mein Beitrag war und wieso ich später eine bessere Lösung im Embedded-Linux-Bereich eingesetzt habe.
OpenEmbedded Projekt-Info Geschichte Bitbake Von BitKeeper zu Git Mein Ausstieg Verwandte Projekte In Beiträgen der Kategorie Job trage ich Projekte zusammen, die ich im Rahmen meiner beruflichen Karriere federführend durchgeführt habe. Ich gehe dabei mit Absicht nicht allzusehr auf Details an: die Interessen meiner Arbeitgeber sollen ja nicht berührt werden.</description></item></channel></rss>