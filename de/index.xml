<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>De on Holger Schurig's Computer Calisthenics &amp; Orthodontia</title><link>https://holgerschurig.github.io/de/</link><description>Recent content in De on Holger Schurig's Computer Calisthenics &amp; Orthodontia</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://holgerschurig.github.io/de/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux-Image auf Basis von i.MX&amp; RISC Prozessor für den Tagebau</title><link>https://holgerschurig.github.io/de/mkarm/</link><pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/mkarm/</guid><description>&lt;p>Wie man sich das zeitaufwändige Cross-Compilieren mit OpenEmbedded spart.&lt;/p>
&lt;p>Oder: Implementierung eines Linux-Images auf eine RISC-Platform für einen sehr
rauhen Anwendungsfall.&lt;/p></description></item><item><title>MNCI: Handterminal mit ARM (Intel PXA320)</title><link>https://holgerschurig.github.io/de/mnci/</link><pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/mnci/</guid><description>&lt;p>Hier stelle ich ein komplexes Projekt vor, bei dem ich federführend die gesamte
Software erstellt habe.&lt;/p></description></item><item><title>OpenEmbedded</title><link>https://holgerschurig.github.io/de/openembedded/</link><pubDate>Fri, 19 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/openembedded/</guid><description>&lt;p>Ein kleiner Abriss, wie OpenEmbedded entstand, was mein Beitrag war und wieso
ich später eine bessere Lösung im Embedded-Linux-Bereich eingesetzt habe.&lt;/p></description></item><item><title>flexibler Hardware-Tester für x86-Systeme: hwtester</title><link>https://holgerschurig.github.io/de/hwtester/</link><pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/hwtester/</guid><description>&lt;p>Hier geht es darum, frisch produzierte Geräte der Klassen DLT-V83 und DLT-V72
auf Herz und Nieren zu prüfen.&lt;/p></description></item><item><title>Automatische Image-Erstellung</title><link>https://holgerschurig.github.io/de/mkimage/</link><pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/mkimage/</guid><description>&lt;p>System um Linux-Images automatisch zu erstellen (einfacher und schneller als
OpenEmbedded, Puppet, Ansible etc).&lt;/p></description></item><item><title>Dynamischer Flash-Schutz</title><link>https://holgerschurig.github.io/de/dynamischer-flashschutz/</link><pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/dynamischer-flashschutz/</guid><description>&lt;p>Hier geht es darum, wie man den Flash-Speicher vor Wear-Out schützen kann,
ohne die Usability allzu sehr einzuschränken.&lt;/p></description></item><item><title>Combined-Linux: ein Image für viele Geräte</title><link>https://holgerschurig.github.io/de/combined-linux/</link><pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/combined-linux/</guid><description>&lt;p>Hier ging es darum, ein und dasselbe Linux-Image auf eine Vielzahl von Geräte zu portieren.&lt;/p>
&lt;p>Dies stand im Gegensatz zu den Windows- und Windows-Embedded-Images. Hier wurde
für jedes Gerät ein eigenes Image erstellt. Gab es eine Innovation, mussten alle
diese Image jeweils neu erstellt werden &amp;mdash; ein zeitraubender Prozess.&lt;/p>
&lt;p>Ich wollte ein &amp;ldquo;Combined Linux&amp;rdquo; machen: eine Image, das alle Features in sich
enthält. Das man überall installieren kann. Das die Hardware erkennt und die
jeweils eingebaute Hardware passend anspricht und zur Verfügung stellt.&lt;/p></description></item><item><title>ATmega328 von Raspberry aus programmieren</title><link>https://holgerschurig.github.io/de/raspi-atmega/</link><pubDate>Mon, 28 Mar 2016 17:48:46 +0200</pubDate><guid>https://holgerschurig.github.io/de/raspi-atmega/</guid><description>&lt;p>Viele Leute kennen den ATmega von den Arduino-Projekten. Dort sind die
Prozessoren bereits mit einem sog. &amp;lsquo;Bootloader&amp;rsquo; versehen, man kann sie
also über deren serielle Schnittstelle programmieren.&lt;/p>
&lt;p>Was aber, wenn man einen &amp;ldquo;rohen&amp;rdquo; ATmega hat, frisch vom
Elektronikladen? Und außerdem kein AVR-Programmiergerät? Dann nimmt
man eben des Raspberry zum Programmieren!&lt;/p></description></item><item><title>Lauflicht mit Raspberry und 74HC595</title><link>https://holgerschurig.github.io/de/raspi-lauflicht/</link><pubDate>Sun, 06 Mar 2016 12:32:10 +0100</pubDate><guid>https://holgerschurig.github.io/de/raspi-lauflicht/</guid><description>&lt;p>Bei dieser Schaltung geht es mir weniger darum, 8 LEDs zu betreiben.
Die kann man nämlich auch direkt am Raspberry Pi anschließen. Sondern
es geht darum, mit den Schieberegister 74HC595 zu experimentieren.&lt;/p>
&lt;p>Dieses steuere ich zunächst durch diverse GPIO Ports an.&lt;/p>
&lt;p>Und danach betreibe ich es am SPI-Port des RasPi. Das funktioniert
wunderbar, obwohl der Text &amp;ldquo;SPI&amp;rdquo; nirgendwo im 74HC595-Datenblatt
auftaucht :-)&lt;/p></description></item><item><title>Messmöglichkeiten des HP8920A</title><link>https://holgerschurig.github.io/de/hp8920a_funktionen/</link><pubDate>Fri, 02 Jul 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/hp8920a_funktionen/</guid><description>&lt;p>Es gibt ein &amp;ldquo;Application Handbook&amp;rdquo;, in dem steht, für welche Messungen
das Gerät geeignet ist. Für einige Messungen braucht man einen &amp;ldquo;Power
Splitter / Combiner&amp;rdquo;, welche ich noch nicht besitze. Oder eine &amp;ldquo;Return
Loss Bridge&amp;rdquo;, welche ich zwar habe, aber deren Qualität ich noch nicht
kenne.&lt;/p></description></item><item><title>L/C Messgerät von DJ8TH</title><link>https://holgerschurig.github.io/de/lcmeter/</link><pubDate>Sun, 13 Jun 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/lcmeter/</guid><description>Über eBay habe ich für 30,50 EUR (plus 7,50 EUR für Versand) ein L/C-Meter von DJ8TH ersteigert. Hier eine Ansicht:
Für den Preis bin ich mit dem Gerät bisher sehr zufrieden. Sogar eine 9V-Batterie war schon enthalten.
Allerdings scheint DJ8TH ein starker Raucher zu sein. Die Zeitungen im Karton roch sehr nach Rauch. Und auch jetzt, nach mehreren Tagen, riecht es im Gehäuse ebenfalls noch. Wenn&amp;rsquo;s keine weiteren Mängel gibt &amp;hellip;</description></item><item><title>Reflektionsmessung an Antenne Maldol EX-104</title><link>https://holgerschurig.github.io/de/antennenmessung/</link><pubDate>Sun, 13 Jun 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/antennenmessung/</guid><description>&lt;p>Laborbucheintrag: wie man mit einem Spektrum-Analyzer eine Antenne ausmisst.&lt;/p></description></item><item><title>Reflexionsmesskopf BX-066</title><link>https://holgerschurig.github.io/de/bx066/</link><pubDate>Sun, 13 Jun 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/bx066/</guid><description>&lt;p>Im Mai 2010 habe ich mir den Reflexionsmesskopf
&lt;a href="http://www.box73.de/catalog/product_info.php?products_id=1296">BX-066&lt;/a>
von Funkamateur / Box73 gekauft.&lt;/p></description></item><item><title>Terminatoren ausmessen</title><link>https://holgerschurig.github.io/de/terminatorenmessung/</link><pubDate>Sun, 13 Jun 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/terminatorenmessung/</guid><description>&lt;p>Eigentlich wollte ich mir mal den &lt;a href="../de/bx066/">BX-066&lt;/a>
&amp;ldquo;Messtechnisch&amp;rdquo; mit dem &lt;a href="../de/hp8920a/">HP8920A&lt;/a> ansehen, z.B. die
Einfügedämpfung und die Richtschärfe bestimmen.&lt;/p>
&lt;p>Dazu, dachte ich, betreibe ich den BX-066 erst mal offen, dann schließe
ich einen Terminator mit 50 Ohm an und schau ihn mir nochmals an. Dann
sehe ich ja, wieviel Leistung im BX-066 bleibt.&lt;/p></description></item><item><title>Funkmessplatz HP 8920A</title><link>https://holgerschurig.github.io/de/hp8920a/</link><pubDate>Thu, 03 Jun 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/hp8920a/</guid><description>&lt;p>Ich habe derzeit Zugriff auf ein interessantes, wenn auch altes
Messgerät. Eigentlich schon ein Funkmessplatz.&lt;/p>
&lt;p>Nun hat das Messgerät über 7 Jahre unbenutzt
in einer Lager-Ecke gelegen und ich darf es bis auf weiteres zuhause
benutzen. Fein!&lt;/p></description></item><item><title>Schurig Universalzähler CU 51 N</title><link>https://holgerschurig.github.io/de/cu51n/</link><pubDate>Thu, 03 Jun 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/cu51n/</guid><description>&lt;p>Wie ich zu einem Relikt gekommen bin :-)&lt;/p></description></item><item><title>Mein Weg zum Funkamateur</title><link>https://holgerschurig.github.io/de/funken-mein-weg/</link><pubDate>Sat, 13 Mar 2010 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/funken-mein-weg/</guid><description>13. April 2010 Funkamateure dürfen ihre Geräte selbst bauen. Dazu bedürfen Sie aber einer Prüfung. Und just diese Prüfung habe ich heute bei der Bundesnetzagentur, Außenstelle Eschborn, bestanden.
Doch wie kam es dazu?
ca. 1984 Früher hatte ich mal einen Apple II Computer und war Mitglied in einem Computerverein namens AUGE. So um das Jahr 1983/1984 lernte ich über diesen Verein Funkamateure aus dem Raum Gießen kennen. Leider habe ich deren Namen vergessen :-(</description></item><item><title/><link>https://holgerschurig.github.io/de/combined-linux/combined-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/combined-linux/combined-linux/</guid><description>Combined-Linux: ein Image für viele Geräte Hier ging es darum, ein und dasselbe Linux-Image auf eine Vielzahl von Geräte zu portieren.
Dies stand im Gegensatz zu den Windows- und Windows-Embedded-Images. Hier wurde für jedes Gerät ein eigenes Image erstellt. Gab es eine Innovation, mussten alle diese Image jeweils neu erstellt werden — ein zeitraubender Prozess.
Ich wollte ein &amp;#34;Combined Linux&amp;#34; machen: eine Image, das alle Features in sich enthält. Das man überall installieren kann.</description></item><item><title/><link>https://holgerschurig.github.io/de/dynamischer-flashschutz/dynamischer-flashschutz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/dynamischer-flashschutz/dynamischer-flashschutz/</guid><description>Dynamischer Flash-Schutz Hier geht es darum, wie man den Flash-Speicher vor Wear-Out schützen kann, ohne die Usability allzu sehr einzuschränken.
Dynamischer Flash-Schutz Projekt-Info Warum muss Flash geschützt werden? Lösungsansätze Flash-Schutz am Beispiel Verwandte Projekte In Beiträgen der Kategorie Job trage ich Projekte zusammen, die ich im Rahmen meiner beruflichen Karriere federführend durchgeführt habe. Ich gehe dabei mit Absicht nicht allzusehr auf Details an: die Interessen meiner Arbeitgeber sollen ja nicht berührt werden.</description></item><item><title/><link>https://holgerschurig.github.io/de/hwtester/hwtester/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/hwtester/hwtester/</guid><description>flexibler Hardware-Tester für x86-Systeme: hwtester Hier geht es darum, frisch produzierte Geräte der Klassen DLT-V83 und DLT-V72 auf Herz und Nieren zu prüfen.
flexibler Hardware-Tester für x86-Systeme: hwtester Projekt-Info Anforderungen Image erstellen automatisiert USB-Stick erstellen Tests Testplätze Testarten Geräte Aufbau der Tests Kommunikation mit Test-Fixture Testreport abspeichern Verwandte Projekte In Beiträgen der Kategorie Job trage ich Projekte zusammen, die ich im Rahmen meiner beruflichen Karriere federführend durchgeführt habe. Ich gehe dabei mit Absicht nicht allzusehr auf Details an: die Interessen meiner Arbeitgeber sollen ja nicht berührt werden.</description></item><item><title/><link>https://holgerschurig.github.io/de/mkarm/mkarm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/mkarm/mkarm/</guid><description>Linux-Image auf Basis von i.MX&amp;amp; RISC Prozessor für den Tagebau Wie man sich das zeitaufwändige Cross-Compilieren mit OpenEmbedded spart.
Oder: Implementierung eines Linux-Images auf eine RISC-Platform für einen sehr rauhen Anwendungsfall.
Linux-Image auf Basis von i.MX&amp;amp; RISC Prozessor für den Tagebau Projekt-Info Projekt-Background Komponentenauswahl Board-Bringup Images Basis-Image: multistrap statt Debootstrap Wie man (nicht) cross-compiliert Kunden-Images Linux-Kernel Kleinere Tools Projekt-Tracking Verwandte Projekte In Beiträgen der Kategorie Job trage ich Projekte zusammen, die ich im Rahmen meiner beruflichen Karriere federführend durchgeführt habe.</description></item><item><title/><link>https://holgerschurig.github.io/de/mkimage/mkimage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/mkimage/mkimage/</guid><description>Automatische Image-Erstellung System um Linux-Images automatisch zu erstellen (einfacher und schneller als OpenEmbedded, Puppet, Ansible etc).
Automatische Image-Erstellung Projekt-Info Anforderungen Vorgehensweise debootstrap&amp;lt;&amp;lt;debootstrap&amp;gt;&amp;gt; Kernel-Erstellung systemd wpasupplicant Pakete, Konfigurationsdateien Verwandte Projekte In Beiträgen der Kategorie Job trage ich Projekte zusammen, die ich im Rahmen meiner beruflichen Karriere federführend durchgeführt habe. Ich gehe dabei mit Absicht nicht allzusehr auf Details an: die Interessen meiner Arbeitgeber sollen ja nicht berührt werden.
Projekt-Info Idee &amp;amp; Umsetzung: ich</description></item><item><title/><link>https://holgerschurig.github.io/de/mnci/mnci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/mnci/mnci/</guid><description>MNCI: Handterminal mit ARM (Intel PXA320) Hier stelle ich ein komplexes Projekt vor, bei dem ich federführend die gesamte Software erstellt habe.
MNCI: Handterminal mit ARM (Intel PXA320) Projekt-Info Vorgeschichte Zum Gerät&amp;lt;&amp;lt;geraet&amp;gt;&amp;gt; Bootloader Flashen via Boundary-Scan Linux-Kernel User-Space Projektende Verwandte Projekte In Beiträgen der Kategorie Job trage ich Projekte zusammen, die ich im Rahmen meiner beruflichen Karriere federführend durchgeführt habe. Ich gehe dabei mit Absicht nicht allzusehr auf Details an: die Interessen meiner Arbeitgeber sollen ja nicht berührt werden.</description></item><item><title/><link>https://holgerschurig.github.io/de/openembedded/openembedded/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://holgerschurig.github.io/de/openembedded/openembedded/</guid><description>OpenEmbedded Ein kleiner Abriss, wie OpenEmbedded entstand, was mein Beitrag war und wieso ich später eine bessere Lösung im Embedded-Linux-Bereich eingesetzt habe.
OpenEmbedded Projekt-Info Geschichte Bitbake Von BitKeeper zu Git Mein Ausstieg Verwandte Projekte In Beiträgen der Kategorie Job trage ich Projekte zusammen, die ich im Rahmen meiner beruflichen Karriere federführend durchgeführt habe. Ich gehe dabei mit Absicht nicht allzusehr auf Details an: die Interessen meiner Arbeitgeber sollen ja nicht berührt werden.</description></item></channel></rss>